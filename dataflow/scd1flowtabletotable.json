{
	"name": "scd1flowtabletotable",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ls_azuresql_for_dataflow",
						"type": "DatasetReference"
					},
					"name": "empsrc"
				},
				{
					"dataset": {
						"referenceName": "ls_azuresql_for_dataflow",
						"type": "DatasetReference"
					},
					"name": "sinkforlkp"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ls_azuresql_for_dataflow",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ls_azuresql_for_dataflow",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "lookup1"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "split1"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          emp_id as integer,",
				"          name as string,",
				"          salary as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> empsrc",
				"source(output(",
				"          emp_id as integer,",
				"          name as string,",
				"          salary as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sinkforlkp",
				"empsrc, sinkforlkp lookup(empsrc@emp_id == sinkforlkp@emp_id,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 select(mapColumn(",
				"          emp_id = empsrc@emp_id,",
				"          name = empsrc@name,",
				"          salary = empsrc@salary,",
				"          sink_emp_id = sinkforlkp@emp_id,",
				"          sink_name = sinkforlkp@name,",
				"          sink_salary = sinkforlkp@salary",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(insert_update_logic = iif(isNull(sink_emp_id),'i','u')) ~> derivedColumn1",
				"derivedColumn1 split(insert_update_logic=='i',",
				"     insert_update_logic=='u',",
				"     disjoint: false) ~> split1@(insert, update, default)",
				"split1@update alterRow(updateIf(1==1)) ~> alterRow1",
				"split1@insert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['emp_id'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
			]
		}
	}
}