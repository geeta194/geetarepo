{
	"name": "dfscd2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dataset_azblob_2025",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "AzureSql_dataset_withparam",
						"type": "DatasetReference"
					},
					"name": "lkptgt"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSql_dataset_withparam",
						"type": "DatasetReference"
					},
					"name": "sinkupdate"
				},
				{
					"dataset": {
						"referenceName": "ls_azuresql_for_dataflow",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "lookup1"
				},
				{
					"name": "insertupdatelogic"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "split1"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "activeflagNderivedColumn2"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Claim_number as string,",
				"          incident_number as string,",
				"          claimant_name as string,",
				"          claimant_address as string,",
				"          payment_type as string,",
				"          claim_amount as integer,",
				"          Insurance_type as string,",
				"          insurance_number as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          Claim_number as string,",
				"          incident_number as string,",
				"          claimant_name as string,",
				"          claimant_address as string,",
				"          payment_type as string,",
				"          claim_amount as string,",
				"          Insurance_type as string,",
				"          insurance_number as string,",
				"          sk_key as integer,",
				"          Active_flag as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> lkptgt",
				"source1, lkptgt lookup(source1@Claim_number == lkptgt@Claim_number,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 derive(insert_update_flag = iif(isNull(lkptgt@Claim_number),'i',\r",
				" iif(not(isNull(lkptgt@Claim_number)) && :md5_src != :md5_tgt,'u','')),",
				"          md5_src := md5(source1@incident_number,source1@claimant_name,source1@claimant_address,source1@payment_type,\r",
				"source1@claim_amount,source1@Insurance_type,source1@insurance_number),",
				"          md5_tgt := md5(lkptgt@incident_number,lkptgt@claimant_name,lkptgt@claimant_address,lkptgt@payment_type,\r",
				"lkptgt@claim_amount,lkptgt@Insurance_type,lkptgt@insurance_number)\r",
				") ~> insertupdatelogic",
				"surrogateKey1 derive(Active_flag = 'Y') ~> derivedColumn1",
				"insertupdatelogic split(insert_update_flag == 'i' ||insert_update_flag == 'u',",
				"     insert_update_flag == 'u',",
				"     disjoint: false) ~> split1@(insert, update)",
				"split1@update alterRow(updateIf(1 == 1)) ~> alterRow1",
				"alterRow1 derive(Active_flag = 'n') ~> activeflagNderivedColumn2",
				"select2 keyGenerate(output(surrogatekeygenerated as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"split1@insert select(mapColumn(",
				"          Claim_number = split1@insert@Claim_number,",
				"          incident_number = split1@insert@incident_number,",
				"          claimant_name = split1@insert@claimant_name,",
				"          claimant_address = split1@insert@claimant_address,",
				"          payment_type = split1@insert@payment_type,",
				"          claim_amount = split1@insert@claim_amount,",
				"          Insurance_type = split1@insert@Insurance_type,",
				"          insurance_number = split1@insert@insurance_number,",
				"          sk_key,",
				"          Active_flag,",
				"          insert_update_flag",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"activeflagNderivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          sk_key,",
				"          Active_flag",
				"     )) ~> sinkupdate",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Claim_number,",
				"          incident_number,",
				"          claimant_name,",
				"          claimant_address,",
				"          payment_type,",
				"          claim_amount,",
				"          Insurance_type,",
				"          insurance_number,",
				"          sk_key = surrogatekeygenerated,",
				"          Active_flag",
				"     )) ~> sink1"
			]
		}
	}
}