{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "datafactorynewtest"
		},
		"AzureBlobStorage3_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage3'"
		},
		"AzureBlobStorage5_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage5'"
		},
		"AzureBlobStorage_2025_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage_2025'"
		},
		"AzureBlobStorage_forfixedlengthfile_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage_forfixedlengthfile'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureSqlDatabase1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabase1'"
		},
		"Oracle_core_schema_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Oracle_core_schema'"
		},
		"Oracle_new_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Oracle_new'"
		},
		"SqlServer1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServer1'"
		},
		"SqlServer_onprem_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServer_onprem'"
		},
		"azuresql_new_ls_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'azuresql_new_ls'"
		},
		"ls adls storage for dataflow_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls adls storage for dataflow'"
		},
		"ls_archive_files_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_archive_files'"
		},
		"ls_azuresql_for_dataflow_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_azuresql_for_dataflow'"
		},
		"ls_mssql_onprem_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_mssql_onprem'"
		},
		"ls_oracle_onpremise_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_oracle_onpremise'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://staccoungtest.dfs.core.windows.net/"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://secretkeynew1.vault.azure.net/"
		},
		"AzureKeyVault2_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://secretkeynew1.vault.azure.net/"
		},
		"AzureSqlDatabase1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "azureservernew1.database.windows.net"
		},
		"AzureSqlDatabase1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "azuredbnew"
		},
		"AzureSqlDatabase1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "geeta"
		},
		"SqlServer1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "LAPTOP-0Q3S5CJC\\SQLEXPRESS"
		},
		"SqlServer1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "master"
		},
		"SqlServer1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sa"
		},
		"SqlServer_onprem_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "DESKTOP-9OVP7SU\\SQLEXPRESS"
		},
		"SqlServer_onprem_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "Geeta"
		},
		"SqlServer_onprem_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "geeta"
		},
		"azuresql_new_ls_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "azureservernew1.database.windows.net"
		},
		"azuresql_new_ls_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "azuredbnew"
		},
		"azuresql_new_ls_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "geeta"
		},
		"ls_azuresql_for_dataflow_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "azureservernew1.database.windows.net"
		},
		"ls_azuresql_for_dataflow_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "azuredbnew"
		},
		"ls_azuresql_for_dataflow_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "geeta"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Get Metadata_practic')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata_practic",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": "project-folder",
									"filename": {
										"value": "*.csv",
										"type": "Expression"
									},
									"folder_name": "src_folder"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata_practic",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata_practic').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "copy data to sqldb",
									"type": "Copy",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "input",
												"filename": {
													"value": " ",
													"type": "Expression"
												},
												"folder_name": "new"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "sqlserver_db_onprem",
											"type": "DatasetReference",
											"parameters": {
												"schema_name": "dbo",
												"table_name": {
													"value": "@replace(item().name,'.csv','')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "archive the srcfileto arcive  pathand zip",
									"type": "Copy",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "copy data to sqldb",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "input",
												"filename": {
													"value": " ",
													"type": "Expression"
												},
												"folder_name": "new"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dataset_for_arcive",
											"type": "DatasetReference",
											"parameters": {
												"container": "arcive",
												"file": {
													"value": " ",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "delete from src after archive",
									"type": "Delete",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "archive the srcfileto arcive  pathand zip",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "input",
												"filename": {
													"value": " ",
													"type": "Expression"
												},
												"folder_name": "new"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"wildcardFileName": {
												"value": "@item().name",
												"type": "Expression"
											},
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"other_file": {
						"type": "String"
					},
					"employee": {
						"type": "String"
					}
				},
				"folder": {
					"name": "class_HW_folder"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-05T17:42:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]",
				"[concat(variables('factoryId'), '/datasets/sqlserver_db_onprem')]",
				"[concat(variables('factoryId'), '/datasets/dataset_for_arcive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PARSE_trans')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PARSE_trans",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"schema_name": "dbo",
										"table_name": "PARSE_SOURCE"
									},
									"sink1": {
										"schema_name": "dbo",
										"table_name": "PARSE_TARGET"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-15T17:49:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/PARSE_trans')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/P_main_insurance_full_project_flow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipelinep_adls_to_snyaps_stage_load",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_adls_to_snyaps_usingazsql_adfas synap",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline_for_dim_and _fact_LOad",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipelinep_adls_to_snyaps_stage_load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_curation_claim snyp_using _storeprocedur",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "new2025"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_adls_to_snyaps_usingazsql_adfas synap')]",
				"[concat(variables('factoryId'), '/pipelines/p_curation_claim snyp_using _storeprocedur')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Stored procedure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[uspLogError]",
							"storedProcedureParameters": {
								"id": {
									"value": {
										"value": "@pipeline().parameters.id",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"id": {
						"type": "int"
					}
				},
				"folder": {
					"name": "New folder"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-05T17:42:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adls_storage_to_sqltable_customer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "adls_storage_to_sqltable_customer",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": "input",
									"filename": "customers.csv",
									"folder_name": {
										"value": " ",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "sqlserver_db_onprem",
								"type": "DatasetReference",
								"parameters": {
									"schema_name": "dbo",
									"table_name": "customers"
								}
							}
						]
					},
					{
						"name": "sqldb_to_adlstorage",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "adls_storage_to_sqltable_customer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sqlserver_db_onprem",
								"type": "DatasetReference",
								"parameters": {
									"schema_name": "dbo",
									"table_name": "customers"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": "output",
									"filename": "customer.csv",
									"folder_name": {
										"value": " ",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "copy_to_arcivle_frm_adls_and_zip_and_delet_frm_adls",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "sqldb_to_adlstorage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "copy_to_arcivle_path_from_adls_and_zip_and_delet_frm_adls",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "class_HW_folder"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-05T17:42:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]",
				"[concat(variables('factoryId'), '/datasets/sqlserver_db_onprem')]",
				"[concat(variables('factoryId'), '/pipelines/copy_to_arcivle_path_from_adls_and_zip_and_delet_frm_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azure_sql_table_to_adlsstorage_for customernew')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data sql_table_to_adlsstorage",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference",
								"parameters": {
									"table_name": {
										"value": "@pipeline().parameters.table_name",
										"type": "Expression"
									},
									"schema_name": {
										"value": "@pipeline().parameters.scheme_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": {
										"value": "@pipeline().parameters.container_name",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.file_name",
										"type": "Expression"
									},
									"folder_name": {
										"value": " ",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"scheme_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					},
					"container_name": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "class_HW_folder"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-05T17:51:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSql_dataset_withparam')]",
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azure_sql_to_onprem_sql_customer_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "azure_sql_to_onprem_sql_customer_load",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference",
								"parameters": {
									"table_name": {
										"value": "@pipeline().parameters.table_name",
										"type": "Expression"
									},
									"schema_name": {
										"value": "@pipeline().parameters.schema_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "sqlserver_db_onprem",
								"type": "DatasetReference",
								"parameters": {
									"schema_name": {
										"value": "@pipeline().parameters.t_schema_name",
										"type": "Expression"
									},
									"table_name": {
										"value": "@pipeline().parameters.t_table_name",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"table_name": {
						"type": "string"
					},
					"schema_name": {
						"type": "string"
					},
					"t_table_name": {
						"type": "string"
					},
					"t_schema_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "class_HW_folder"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-05T17:51:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSql_dataset_withparam')]",
				"[concat(variables('factoryId'), '/datasets/sqlserver_db_onprem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_starage_to_blob_storage_for_dept_details_csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "blob_starage_to_blob_storage_for_dept_details_csv",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": {
										"value": "@pipeline().parameters.container_name",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.file_name",
										"type": "Expression"
									},
									"folder_name": {
										"value": " ",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": {
										"value": "@pipeline().parameters.t_container_name",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.t_file_name",
										"type": "Expression"
									},
									"folder_name": {
										"value": " ",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"container_name": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					},
					"t_container_name": {
						"type": "string"
					},
					"t_file_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "class_HW_folder"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-05T17:42:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blobstorage_to_azure_sql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "blobstorage_to_azure_sql_for_customer_csv",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": {
										"value": "@pipeline().parameters.container_name",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.filename",
										"type": "Expression"
									},
									"folder_name": {
										"value": "@pipeline().parameters.folder_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference",
								"parameters": {
									"table_name": {
										"value": "@concat(pipeline().parameters.filename,'.csv')",
										"type": "Expression"
									},
									"schema_name": "dbo"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"container_name": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					},
					"folder_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "class_HW_folder"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-05T17:51:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]",
				"[concat(variables('factoryId'), '/datasets/AzureSql_dataset_withparam')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_to_arcivle_path_from_adls_and_zip_and_delet_frm_adls')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy_and_zip_to_arcivle_path_from_adls",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": "output",
									"filename": "customer.csv",
									"folder_name": {
										"value": " ",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dataset_for_arcive",
								"type": "DatasetReference",
								"parameters": {
									"container": "arcive",
									"file": "customer.csv",
									"folder": {
										"value": " ",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "delete from src_after arcive",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "copy_and_zip_to_arcivle_path_from_adls",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": "output",
									"filename": "customer.csv",
									"folder_name": {
										"value": " ",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "class_HW_folder"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-05T17:42:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]",
				"[concat(variables('factoryId'), '/datasets/dataset_for_arcive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyfile to db')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.p_file_name",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@pipeline().parameters.p_folder_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSql_dataset_withparam",
											"type": "DatasetReference",
											"parameters": {
												"table_name": {
													"value": "@replace(item().name,'.csv','p_load')",
													"type": "Expression"
												},
												"schema_name": "dbo"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_file_name": {
						"type": "array"
					},
					"p_folder_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "2025_senario"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]",
				"[concat(variables('factoryId'), '/datasets/AzureSql_dataset_withparam')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowSKkey')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowSKkey",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"contanier_name": "project-folder",
										"filename": "employee.csv",
										"folder_name": "src_folder"
									},
									"sink1": {
										"contanier_name": "project-folder",
										"filename": "SKEEMP.csv",
										"folder_name": "tgt_folder"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T03:15:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowSKkey')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_unpivot')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_unpivot",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"table_name": "UNPIVOTSOURCE",
										"schema_name": "DBO"
									},
									"sink1": {
										"table_name": "UNPIVOTTARGET",
										"schema_name": "DBO"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T02:24:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_unpivot')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/delete_all_csv_from_outputcont')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "delete_all_csv_from_outputcont",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": {
										"value": "@pipeline().parameters.container_name",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.file_name",
										"type": "Expression"
									},
									"folder_name": {
										"value": " ",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage3",
									"type": "LinkedServiceReference"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"wildcardFileName": "*.csv",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"container_name": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "class_HW_folder"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-05T17:42:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CummulativeRunningtotalusingDataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_CummulativeRunningtotalusingDataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_CummulativeRunningtotalusingDataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"contanier_name": "project-folder",
										"filename": "emp1.csv",
										"folder_name": "src_folder"
									},
									"sink1": {
										"contanier_name": "project-folder",
										"filename": {
											"value": " ",
											"type": "Expression"
										},
										"folder_name": "tgt_folder"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "new2025"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_CummulativeRunningtotalusingDataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfscd2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfscd2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfscd2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"container": "project-folder",
										"folder": "src_folder",
										"file": "claim_src_data.csv"
									},
									"lkptgt": {
										"table_name": "claim_tgt_scd2data",
										"schema_name": "dbo"
									},
									"sinkupdate": {
										"table_name": "claim_tgt_scd2data",
										"schema_name": "dbo"
									},
									"sink1": {
										"schema_name": "dbo",
										"table_name": "claim_tgt_scd2data"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfscd2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dup_handling_cityload')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dup_handling_cityload",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage3",
										"type": "LinkedServiceReference"
									},
									"path": "output"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sqlserver_db_onprem",
								"type": "DatasetReference",
								"parameters": {
									"schema_name": {
										"value": "@pipeline().parameters.schema_name",
										"type": "Expression"
									},
									"table_name": {
										"value": "@pipeline().parameters.table_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "sqlserver_db_onprem",
								"type": "DatasetReference",
								"parameters": {
									"schema_name": {
										"value": "@pipeline().parameters.t_schema",
										"type": "Expression"
									},
									"table_name": {
										"value": "@pipeline().parameters.t_table",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					},
					"t_schema": {
						"type": "string"
					},
					"t_table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "class_HW_folder"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-04T16:53:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sqlserver_db_onprem')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/execute_pipeline_incr_and_full_together')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "project_flow_with_cntrl_table_for_full_load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "project_flow_with_cntrl_table_incr",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Execute Pipeline2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"max_updat_date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "class_HW_folder"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-10T22:01:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/project_flow_with_cntrl_table_for_full_load')]",
				"[concat(variables('factoryId'), '/pipelines/project_flow_with_cntrl_table_incr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/getfiles_from_adls_dianamicaly_load_azuresql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Getfilesfromadls",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": "project-folder",
									"filename": {
										"value": "*.csv",
										"type": "Expression"
									},
									"folder_name": "src_folder"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Getfilesfromadls",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Getfilesfromadls').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": " ",
													"type": "Expression"
												},
												"folder_name": "src_folder"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSql_dataset_withparam",
											"type": "DatasetReference",
											"parameters": {
												"table_name": {
													"value": "@replace(item().name,'.csv','')",
													"type": "Expression"
												},
												"schema_name": "dbo"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "senario"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-23T04:05:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]",
				"[concat(variables('factoryId'), '/datasets/AzureSql_dataset_withparam')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/getting_deleted_file_to_src_location')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sqlserver_db_onprem",
								"type": "DatasetReference",
								"parameters": {
									"schema_name": {
										"value": "@pipeline().parameters.schema",
										"type": "Expression"
									},
									"table_name": {
										"value": "@pipeline().parameters.table",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": "input",
									"filename": {
										"value": "@concat(pipeline().parameters.table,'.csv')",
										"type": "Expression"
									},
									"folder_name": "new"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "New folder"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-05T17:42:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sqlserver_db_onprem')]",
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/incoming_structure_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "incoming_structure_file",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": "project-folder",
									"filename": "file_structure_emp1.csv",
									"folder_name": {
										"value": " ",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"structure"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "incoming file",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": "project-folder",
									"filename": "emp1.csv",
									"folder_name": "src_folder"
								}
							},
							"fieldList": [
								"structure"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "structure of file test",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "incoming_structure_file",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "incoming file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('incoming_structure_file').output.structure,activity('incoming file').output.structure)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Fail1",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "structure dosen't match",
											"type": "Expression"
										},
										"errorCode": "200"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": "emp1.csv",
												"folder_name": "src_folder"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": " ",
													"type": "Expression"
												},
												"folder_name": "tgt_folder"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "class_HW_folder"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-05T17:42:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/incr_load_with_watermarktable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkponwatermarktable",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sqlserver_db_onprem",
								"type": "DatasetReference",
								"parameters": {
									"schema_name": "dbo",
									"table_name": "wartermarktable"
								}
							}
						}
					},
					{
						"name": "latestupdatedate_Lookup_on file_src",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select max(last_modifytime) as latestupdatedate from file_src",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sqlserver_db_onprem",
								"type": "DatasetReference",
								"parameters": {
									"schema_name": {
										"value": "@pipeline().parameters.schema_name",
										"type": "Expression"
									},
									"table_name": {
										"value": "@pipeline().parameters.table_name",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "lkponwatermarktable",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "latestupdatedate_Lookup_on file_src",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select * from file_src where last_modifytime>'@{activity('lkponwatermarktable').output.firstRow.watermarkvalue}' and last_modifytime<='@{activity('latestupdatedate_Lookup_on file_src').output.firstRow.latestupdatedate}'\n\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sqlserver_db_onprem",
								"type": "DatasetReference",
								"parameters": {
									"schema_name": "dbo.",
									"table_name": "file_src"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": "project-folder",
									"filename": {
										"value": "@concat('file.',pipeline().RunId)",
										"type": "Expression"
									},
									"folder_name": "tgt_folder"
								}
							}
						]
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[update_watermark_table]",
							"storedProcedureParameters": {
								"lastmodifytime": {
									"value": {
										"value": "@activity('latestupdatedate_Lookup_on file_src').output.firstRow.latestupdatedate",
										"type": "Expression"
									},
									"type": "String"
								},
								"tablename": {
									"value": {
										"value": "@activity('latestupdatedate_Lookup_on file_src').output.firstRow.table_name\n",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer_onprem",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-05T05:55:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sqlserver_db_onprem')]",
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer_onprem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/oracle_onprem_to_sql_onprem_for city')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "oracle_onprem_to_sql_onprem_for city",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "EMPNO",
											"type": "Double"
										},
										"sink": {
											"name": "empno",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "CITY",
											"type": "String"
										},
										"sink": {
											"name": "city",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "oracle_db_onprem_with_param",
								"type": "DatasetReference",
								"parameters": {
									"schema_name": {
										"value": "@pipeline().parameters.schema_name",
										"type": "Expression"
									},
									"table_name": {
										"value": "@pipeline().parameters.table_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "sqlserver_db_onprem",
								"type": "DatasetReference",
								"parameters": {
									"schema_name": {
										"value": "@pipeline().parameters.t_schema_name",
										"type": "Expression"
									},
									"table_name": {
										"value": "@pipeline().parameters.t_table_name",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					},
					"t_schema_name": {
						"type": "string"
					},
					"t_table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "class_HW_folder"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-04T16:53:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/oracle_db_onprem_with_param')]",
				"[concat(variables('factoryId'), '/datasets/sqlserver_db_onprem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Identify_latestfiles_basedonlastmodifydate andprocess')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": "project-folder",
									"filename": {
										"value": " ",
										"type": "Expression"
									},
									"folder_name": "new"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata2",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												},
												"folder_name": "new"
											}
										},
										"fieldList": [
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('Get Metadata2').output.lastModified,variables('v_latest_date'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Set variable1_for_date",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "v_latest_date",
													"value": {
														"value": "@activity('Get Metadata2').output.lastModified",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set variable2_file",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Set variable1_for_date",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "v_latest_file",
													"value": {
														"value": "@{item().name}",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": "project-folder",
									"filename": {
										"value": "@variables('v_latest_file')",
										"type": "Expression"
									},
									"folder_name": "new"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": "project-folder",
									"filename": {
										"value": "@concat(variables('v_latest_file'),'.csv')",
										"type": "Expression"
									},
									"folder_name": "dbo"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"v_latest_date": {
						"type": "String",
						"defaultValue": "1900-01-01"
					},
					"v_latest_file": {
						"type": "String"
					}
				},
				"folder": {
					"name": "new2025"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_MergMultiplerowintoasinglerow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_MergMultiplerowintoasinglerow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"contanier_name": "project-folder",
										"filename": "listagg_src.csv",
										"folder_name": "src_folder"
									},
									"sink1": {
										"contanier_name": "project-folder",
										"filename": "tgt_listagg.csv",
										"folder_name": "tgt_folder"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "new2025"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_MergMultiplerowintoasinglerow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_adls_to_snyaps_usingazsql_adfas synap')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": "project-folder",
									"filename": {
										"value": " ",
										"type": "Expression"
									},
									"folder_name": "in_snyp_folder"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "truncate table @{concat(replace(item().name,'.csv',''),'_stage')}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												},
												"folder_name": "in_snyp_folder"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSql_dataset_withparam",
											"type": "DatasetReference",
											"parameters": {
												"table_name": {
													"value": "@{concat(replace(item().name,'.csv',''),'_stage')}",
													"type": "Expression"
												},
												"schema_name": "dbo"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "new2025"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]",
				"[concat(variables('factoryId'), '/datasets/AzureSql_dataset_withparam')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_copy_iftrue_countfile_is_4p_count_no_ofFile_if5_process_elsenotprocess')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": "project-folder",
									"filename": {
										"value": " ",
										"type": "Expression"
									},
									"folder_name": "DBO"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": " ",
													"type": "Expression"
												},
												"folder_name": "DBO"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												},
												"folder_name": "new"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "new2025"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_copy_multiple_f_with_getmetadata_foreach')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": {
													"value": "@pipeline().parameters.container",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@pipeline().parameters.folder",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "onprem_sql",
											"type": "DatasetReference",
											"parameters": {
												"schema_name": {
													"value": "@pipeline().parameters.folder",
													"type": "Expression"
												},
												"table_name": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "adls2025",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "new2025"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adls2025')]",
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]",
				"[concat(variables('factoryId'), '/datasets/onprem_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_count_no_ofFile_if5_process_elsenotprocess')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": "project-folder",
									"filename": "*.csv",
									"folder_name": "DBO"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "no_of_file",
							"value": {
								"value": "@length(activity('Get Metadata1').output.childItems)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('no_of_file'),3)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Fail1",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "file count is not 4",
										"errorCode": "1000"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"no_of_file": {
						"type": "Integer"
					}
				},
				"folder": {
					"name": "new2025"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_curation_claim snyp_using _storeprocedur')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure_incident",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_project_incident_dim]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Stored location",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_PROJECT_LOCATION_DIM]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Stored pnotes",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_PROJECT_NOTES_DIM]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Stored procedure_for _factTable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Stored location",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Stored pnotes",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Stored procedure_incident",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_project_claim_fact]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "new2025"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_dfSplitSinglerow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfSplitSinglerow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"contanier_name": "project-folder",
										"filename": "tgt_listagg.csv",
										"folder_name": "tgt_folder"
									},
									"sink1": {
										"contanier_name": "project-folder",
										"filename": "tgt_splitrow.csv",
										"folder_name": "src_foldeer"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "new2025"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfSplitSinglerow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_full_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_contrl_table_forfullload",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select *from [metadata].[control_table_Batch_001] where load_type='@{pipeline().parameters.load_type}' and is_active='Y' and SOURCE_SYSTEM='@{pipeline().parameters.src_system}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "control_table_Batch_001",
									"schema_name": "metadata"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_contrl_table_forfullload",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_contrl_table_forfullload').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "onprem_sqlserverToADLSstorageCopy",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "sqlserver_db_onprem",
											"type": "DatasetReference",
											"parameters": {
												"schema_name": {
													"value": "@item().SOURCE_SCHEMA",
													"type": "Expression"
												},
												"table_name": {
													"value": "@item().SOURCE_TABLE",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": "@concat(item().SOURCE_TABLE,'.csv')",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@item().SOURCE_SCHEMA",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "ADLSstorageToAzureSql",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "onprem_sqlserverToADLSstorageCopy",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": "@concat(item().SOURCE_TABLE,'.csv')",
												"folder_name": {
													"value": "@item().SOURCE_SCHEMA",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSql_dataset_withparam",
											"type": "DatasetReference",
											"parameters": {
												"table_name": {
													"value": "@item().TARGET_TABLE",
													"type": "Expression"
												},
												"schema_name": {
													"value": "@item().TARGET_SCHEMA",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete_Afterarcivinginzipformat_delete_fromAdls",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "MoveAdlsFileToArciveLocation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": "@concat(item().SOURCE_TABLE,'.csv')",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@item().SOURCE_SCHEMA",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "MoveAdlsFileToArciveLocation",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ADLSstorageToAzureSql",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": "@concat(item().SOURCE_TABLE,'.csv')",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@item().TARGET_SCHEMA",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dataset_for_arcive",
											"type": "DatasetReference",
											"parameters": {
												"container": "project-folder",
												"file": {
													"value": "@concat(item().TARGET_TABLE,'_',utcNow(),'.csv')\n",
													"type": "Expression"
												},
												"folder": {
													"value": "arcive",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"src_system": {
						"type": "string",
						"defaultValue": "SQL_SERVER"
					},
					"load_type": {
						"type": "string",
						"defaultValue": "full"
					}
				},
				"folder": {
					"name": "new2025"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSql_dataset_withparam')]",
				"[concat(variables('factoryId'), '/datasets/sqlserver_db_onprem')]",
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]",
				"[concat(variables('factoryId'), '/datasets/dataset_for_arcive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_get_file_name_fromsrcfolderandprocess_only csvfile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": " ",
													"type": "Expression"
												},
												"folder_name": {
													"value": "DBO",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": " ",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@pipeline().parameters.FOLDER",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": "project-folder",
									"filename": "*.*",
									"folder_name": "DBO"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name,'.csv')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FOLDER": {
						"type": "string"
					}
				},
				"folder": {
					"name": "new2025"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_incr_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_on_cntrolTable_for_incr_typetable",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select *from [metadata].[control_table_Batch_001] where load_type='@{pipeline().parameters.LOAD_TYPE}' \nand is_active='Y' and SOURCE_SYSTEM='@{pipeline().parameters.SOURCE_SYSTEM}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "control_table_Batch_001",
									"schema_name": "metadata"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach_to_process_Incr_table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_on_cntrolTable_for_incr_typetable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_on_cntrolTable_for_incr_typetable').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy dataFromsrconpremsqlToAdlsstorage",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT * \nFROM @{item().SOURCE_SCHEMA}.@{item().SOURCE_TABLE} \nWHERE @{item().WATERMARK_COLUMN} > '@{item().WATERMARK_COLUM_VALUE}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "sqlserver_db_onprem",
											"type": "DatasetReference",
											"parameters": {
												"schema_name": {
													"value": " ",
													"type": "Expression"
												},
												"table_name": {
													"value": " ",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": "@concat(item().SOURCE_TABLE,'.csv')",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@item().TARGET_SCHEMA",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Copy data_Adls_storage_to_azureSql",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy dataFromsrconpremsqlToAdlsstorage",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": "@concat(item().SOURCE_TABLE,'.csv')",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@item().SOURCE_SCHEMA",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSql_dataset_withparam",
											"type": "DatasetReference",
											"parameters": {
												"table_name": {
													"value": "@item().TARGET_TABLE",
													"type": "Expression"
												},
												"schema_name": {
													"value": "@item().TARGET_SCHEMA",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "move_to_arcival_location_fromAdls_storage",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy data_Adls_storage_to_azureSql",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": "@concat(item().SOURCE_TABLE,'.csv')",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@item().SOURCE_SCHEMA",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dataset_for_arcive",
											"type": "DatasetReference",
											"parameters": {
												"container": "project-folder",
												"file": {
													"value": "@concat(item().SOURCE_TABLE,'.csv')",
													"type": "Expression"
												},
												"folder": {
													"value": "arcive",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "After_arcivethe_file_delete_from_adlsstorage",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "move_to_arcival_location_fromAdls_storage",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": "@concat(item().SOURCE_TABLE,'.csv')",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@item().SOURCE_SCHEMA",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Script_updating_watermarkconumnvalue_in_controltable",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "After_arcivethe_file_delete_from_adlsstorage",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "update [metadata].[control_table_Batch_001] set WATERMARK_COLUM_VALUE= getdate() where SOURCE_SYSTEM=@{item().SOURCE_SYSTEM} and \t\nLOAD_TYPE=@{item().LOAD_TYPE} and SOURCE_SCHEMA=@{item().SOURCE_SCHEMA} and SOURCE_TABLE=@{item().SOURCE_TABLE}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SOURCE_SYSTEM": {
						"type": "string",
						"defaultValue": "SQL_SERVER"
					},
					"LOAD_TYPE": {
						"type": "string",
						"defaultValue": "incr"
					}
				},
				"folder": {
					"name": "new2025"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSql_dataset_withparam')]",
				"[concat(variables('factoryId'), '/datasets/sqlserver_db_onprem')]",
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]",
				"[concat(variables('factoryId'), '/datasets/dataset_for_arcive')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_loop_inside_if')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lookingfolderlistfile",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": "project-folder",
									"filename": "list_offolder.csv",
									"folder_name": {
										"value": " ",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "lookingfolderlistfile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lookingfolderlistfile').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "getfileinsidefolder",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": " ",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@item().folder_name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"childItems"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "copyfile to db",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "getfileinsidefolder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "copyfile to db",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"p_file_name": {
												"value": "@activity('getfileinsidefolder').output.childItems",
												"type": "Expression"
											},
											"p_folder_name": {
												"value": "@item().folder_name",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2025_senario"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]",
				"[concat(variables('factoryId'), '/pipelines/copyfile to db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_scdtype1_new')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "scdtype1_new",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_scdtype1_new",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"claimfile": {
										"contanier_name": "project-folder",
										"filename": "claim_src_data.csv",
										"folder_name": "src_folder"
									},
									"lkpontgt": {
										"table_name": "claim_tgt_scd1data",
										"schema_name": "dbo"
									},
									"insertclaim": {
										"table_name": "claim_tgt_scd1data",
										"schema_name": "dbo"
									},
									"updsink": {
										"table_name": "claim_tgt_scd1data",
										"schema_name": "dbo"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_scdtype1_new')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_to get_max_update_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select max(update_date) as max_update_date from transaction_data;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sqlserver_db_onprem",
								"type": "DatasetReference",
								"parameters": {
									"schema_name": {
										"value": " ",
										"type": "Expression"
									},
									"table_name": {
										"value": " ",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Set_max_update_date",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Lookup_to get_max_update_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_max_update_date",
							"value": {
								"value": "update METADATA.CONTROL_TABLE set PROCESSED_DATE='@{activity('Lookup_to get_max_update_date').output.firstRow.max_update_date}' where control_id=4\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Script1",
						"type": "Script",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Set_max_update_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "update METADATA.CONTROL_TABLE set PROCESSED_DATE='@{variables('v_max_update_date')}' where control_id=4",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sqlserver_db_onprem')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dataset_azblob_2025",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									},
									"folder": {
										"value": "@pipeline().parameters.folder",
										"type": "Expression"
									},
									"file": {
										"value": "*.csv",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_azblob_2025",
											"type": "DatasetReference",
											"parameters": {
												"container": "project-folder",
												"folder": "src_folder",
												"file": {
													"value": " ",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "sqlserver_db_onprem",
											"type": "DatasetReference",
											"parameters": {
												"schema_name": "dbo",
												"table_name": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": " ",
													"type": "Expression"
												},
												"folder_name": "DBO"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dataset_for_arcive",
											"type": "DatasetReference",
											"parameters": {
												"container": "project-folder",
												"file": {
													"value": " ",
													"type": "Expression"
												},
												"folder": "arcive"
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy data2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": " ",
													"type": "Expression"
												},
												"folder_name": "DBO"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"wildcardFileName": {
												"value": "@item().name",
												"type": "Expression"
											},
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"folder": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"folder": {
					"name": "2025_senario"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_azblob_2025')]",
				"[concat(variables('factoryId'), '/datasets/sqlserver_db_onprem')]",
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]",
				"[concat(variables('factoryId'), '/datasets/dataset_for_arcive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline5')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": "project-folder",
									"filename": "claim_src_data.csv",
									"folder_name": "src_folder"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "claim_tgt_scd1data",
									"schema_name": "dbo"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]",
				"[concat(variables('factoryId'), '/datasets/AzureSql_dataset_withparam')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline6')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "p_scdtype2_new",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_scdtype2_new",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"contanier_name": "project-folder",
										"filename": "claim_src_data.csv",
										"folder_name": "src_folder"
									},
									"lkptgt": {
										"table_name": "claim_tgt_scd2data",
										"schema_name": "dbo"
									},
									"insTgt": {
										"table_name": "claim_tgt_scd2data",
										"schema_name": "dbo"
									},
									"updtgt": {
										"table_name": "claim_tgt_scd2data",
										"schema_name": "dbo"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2025_senario"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_scdtype2_new')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/project_flow_with_cntrl_table_FULL_with_filter_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_on_cntrl_table_for_incr_load",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from METADATA.CONTROL_TABLE where source_system='@{pipeline().parameters.source_system}' AND LOAD_TYPE='@{pipeline().parameters.load_type}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "CONTROL_TABLE",
									"schema_name": "METADATA"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter1').output.value\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "onprem_sql_to azureblob",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from @{item().SOURCE_TABLE_SCHEMA}.@{item().SOURCE_TABLE_NAME} \n\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "sqlserver_db_onprem",
											"type": "DatasetReference",
											"parameters": {
												"schema_name": {
													"value": "@item().SOURCE_TABLE_SCHEMA",
													"type": "Expression"
												},
												"table_name": {
													"value": "@item().SOURCE_TABLE_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": "@concat(item().TARGET_TABLE,'.csv')",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@item().TARGET_TABLE_SCHEMA",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "azureblob_to_azuresql",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "onprem_sql_to azureblob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": "@concat(item().TARGET_TABLE,'.csv')",
												"folder_name": "@item().TARGET_TABLE_SCHEMA"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSql_dataset_withparam",
											"type": "DatasetReference",
											"parameters": {
												"table_name": {
													"value": "@item().TARGET_TABLE",
													"type": "Expression"
												},
												"schema_name": {
													"value": "@item().TARGET_TABLE_SCHEMA",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "arcive-from_azureblob_to_arcivefolder",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "azureblob_to_azuresql",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": "@concat(item().TARGET_TABLE,'.csv')",
												"folder_name": "@item().TARGET_TABLE_SCHEMA"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dataset_for_arcive",
											"type": "DatasetReference",
											"parameters": {
												"container": "arcive",
												"file": {
													"value": " ",
													"type": "Expression"
												},
												"folder": {
													"value": " ",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "delete_from_azureblob_after arcive",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "arcive-from_azureblob_to_arcivefolder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": "@concat(item().TARGET_TABLE,'.csv')",
												"folder_name": "@item().TARGET_TABLE_SCHEMA"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Lookup_to get_max_update_date_from_trans_table",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "delete_from_azureblob_after arcive",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select max(@{item().WATERMARK_COLUMN}) as max_update_date from   @{item().SOURCE_TABLE_SCHEMA}.@{item().SOURCE_TABLE_NAME}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "sqlserver_db_onprem",
											"type": "DatasetReference",
											"parameters": {
												"schema_name": {
													"value": " ",
													"type": "Expression"
												},
												"table_name": {
													"value": " ",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "Set_max_update_date",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Lookup_to get_max_update_date_from_trans_table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "max_updat_date",
										"value": {
											"value": "@STRING(activity('Lookup_to get_max_update_date_from_trans_table').output.firstRow.max_updat_date)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "update_proceed_date_as max_date_on_cntrl_table",
									"type": "Script",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "update METADATA.CONTROL_TABLE set PROCESSED_DATE='@{variables('v_max_update_date')}' where control_id=@{item().CONTROL_ID}\n\n\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "update_proceed_date_as max_date_on_cntrl_table_using_sp",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Set_max_update_date",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[update_PROCESSED_DATE]",
										"storedProcedureParameters": {
											"in_CONTROL_ID": {
												"value": {
													"value": "@item().CONTROL_ID",
													"type": "Expression"
												}
											},
											"in_PROCESSED_DATE": {
												"value": {
													"value": "@variables('max_updat_date')",
													"type": "Expression"
												}
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup_on_cntrl_table_for_incr_load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_on_cntrl_table_for_incr_load').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().SOURCE_TABLE_NAME,'CLAIM')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SOURCE_SYSTEM": {
						"type": "string",
						"defaultValue": "SQL_SERVER"
					},
					"LOAD_TYPE": {
						"type": "string"
					}
				},
				"variables": {
					"max_updat_date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "class_HW_folder"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-10T22:10:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSql_dataset_withparam')]",
				"[concat(variables('factoryId'), '/datasets/sqlserver_db_onprem')]",
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]",
				"[concat(variables('factoryId'), '/datasets/dataset_for_arcive')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/project_flow_with_cntrl_table_for_full_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lookup on control_table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select* from dbo.CONTROL_TABLE where source_system='@{pipeline().parameters.SOURCE_SYSTEM}' and load_type='@{pipeline().parameters.LOAD_TYPE}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "CONTROL_TABLE",
									"schema_name": "METADATA"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "process sources table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lookup on control_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lookup on control_table').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "copy data_onprmsql_to_azblob",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "sqlserver_db_onprem",
											"type": "DatasetReference",
											"parameters": {
												"schema_name": {
													"value": "@item().SOURCE_TABLE_SCHEMA\n",
													"type": "Expression"
												},
												"table_name": {
													"value": "@item().SOURCE_TABLE_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": "@concat(item().TARGET_TABLE,'.csv')",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@item().SOURCE_TABLE_SCHEMA",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "azblob_to_azsql",
									"type": "Copy",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "copy data_onprmsql_to_azblob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": "@concat(item().TARGET_TABLE,'.csv')\n\n",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@item().SOURCE_TABLE_SCHEMA",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSql_dataset_withparam",
											"type": "DatasetReference",
											"parameters": {
												"table_name": {
													"value": "@item().TARGET_TABLE",
													"type": "Expression"
												},
												"schema_name": "@item().TARGET_TABLE_SCHEMA"
											}
										}
									]
								},
								{
									"name": "arcive_the_file_to_arcival_location",
									"type": "Copy",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "azblob_to_azsql",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": "@concat(item().TARGET_TABLE,'.csv')",
												"folder_name": "@item().SOURCE_TABLE_SCHEMA"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dataset_for_arcive",
											"type": "DatasetReference",
											"parameters": {
												"container": "arcive",
												"file": {
													"value": "@concat(item().TARGET_TABLE,'_',utcNow(),'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "delete_file_from_blob_after_arcive",
									"type": "Delete",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "arcive_the_file_to_arcival_location",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": "@concat(item().TARGET_TABLE,'.csv')",
												"folder_name": "@item().SOURCE_TABLE_SCHEMA"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SOURCE_SYSTEM": {
						"type": "string",
						"defaultValue": "SQL_SERVER"
					},
					"LOAD_TYPE": {
						"type": "string",
						"defaultValue": "FULL"
					}
				},
				"variables": {
					"max_update_date": {
						"type": "String"
					},
					"v_max_update_date": {
						"type": "String"
					},
					"max_updat_date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "class_HW_folder"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-21T17:52:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSql_dataset_withparam')]",
				"[concat(variables('factoryId'), '/datasets/sqlserver_db_onprem')]",
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]",
				"[concat(variables('factoryId'), '/datasets/dataset_for_arcive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/project_flow_with_cntrl_table_incr')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_on_cntrl_table_for_incr_load",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from METADATA.CONTROL_TABLE where source_system='@{pipeline().parameters.source_system}' AND LOAD_TYPE='@{pipeline().parameters.load_type}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "CONTROL_TABLE",
									"schema_name": "METADATA"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Lookup_on_cntrl_table_for_incr_load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_on_cntrl_table_for_incr_load').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "onprem_sql_to azureblob",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from @{item().SOURCE_TABLE_SCHEMA}.@{item().SOURCE_TABLE_NAME} where @{item().WATERMARK_COLUMN} > '@{item().PROCESSED_DATE}'\n\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "sqlserver_db_onprem",
											"type": "DatasetReference",
											"parameters": {
												"schema_name": {
													"value": "@item().SOURCE_TABLE_SCHEMA",
													"type": "Expression"
												},
												"table_name": {
													"value": "@item().SOURCE_TABLE_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": "@concat(item().TARGET_TABLE,'.csv')",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@item().TARGET_TABLE_SCHEMA",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "azureblob_to_azuresql",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "onprem_sql_to azureblob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": "@concat(item().TARGET_TABLE,'.csv')",
												"folder_name": "@item().TARGET_TABLE_SCHEMA"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSql_dataset_withparam",
											"type": "DatasetReference",
											"parameters": {
												"table_name": {
													"value": "@item().TARGET_TABLE",
													"type": "Expression"
												},
												"schema_name": {
													"value": "@item().TARGET_TABLE_SCHEMA",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "arcive-from_azureblob_to_arcivefolder",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "azureblob_to_azuresql",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": "@concat(item().TARGET_TABLE,'.csv')",
												"folder_name": "@item().TARGET_TABLE_SCHEMA"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dataset_for_arcive",
											"type": "DatasetReference",
											"parameters": {
												"container": "arcive",
												"file": {
													"value": " ",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "delete_from_azureblob_after arcive",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "arcive-from_azureblob_to_arcivefolder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": "@concat(item().TARGET_TABLE,'.csv')",
												"folder_name": "@item().TARGET_TABLE_SCHEMA"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Lookup_to get_max_update_date_from_trans_table",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "delete_from_azureblob_after arcive",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select max(@{item().WATERMARK_COLUMN}) as max_update_date from   @{item().SOURCE_TABLE_SCHEMA}.@{item().SOURCE_TABLE_NAME}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "sqlserver_db_onprem",
											"type": "DatasetReference",
											"parameters": {
												"schema_name": {
													"value": " ",
													"type": "Expression"
												},
												"table_name": {
													"value": " ",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "Set_max_update_date",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Lookup_to get_max_update_date_from_trans_table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_max_update_date",
										"value": {
											"value": "@STRING(activity('Lookup_to get_max_update_date_from_trans_table').output.firstRow.max_update_date)\n\n\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "update_proceed_date_as max_date_on_cntrl_table",
									"type": "Script",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "update METADATA.CONTROL_TABLE set PROCESSED_DATE='@{variables('v_max_update_date')}' where control_id=@{item().CONTROL_ID}\n\n\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "update_proceed_date_as max_date_on_cntrl_table_using_sp",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Set_max_update_date",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[update_PROCESSED_DATE]",
										"storedProcedureParameters": {
											"in_CONTROL_ID": {
												"value": {
													"value": "@item().CONTROL_ID",
													"type": "Expression"
												}
											},
											"in_PROCESSED_DATE": {
												"value": {
													"value": "@variables('v_max_update_date')",
													"type": "Expression"
												}
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"source_system": {
						"type": "string",
						"defaultValue": "SQL_SERVER"
					},
					"load_type": {
						"type": "string",
						"defaultValue": "INCR"
					}
				},
				"variables": {
					"max_update_date": {
						"type": "String"
					},
					"v_max_update_date": {
						"type": "String"
					},
					"max_updat_date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "class_HW_folder"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-10T22:01:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSql_dataset_withparam')]",
				"[concat(variables('factoryId'), '/datasets/sqlserver_db_onprem')]",
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]",
				"[concat(variables('factoryId'), '/datasets/dataset_for_arcive')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/project_flow_with_cntrl_table_incr_with_swithc_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_on_cntrl_table_for_incr_load",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from METADATA.CONTROL_TABLE where source_system='@{pipeline().parameters.source_system}' AND LOAD_TYPE='@{pipeline().parameters.load_type}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "CONTROL_TABLE",
									"schema_name": "METADATA"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_on_cntrl_table_for_incr_load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_on_cntrl_table_for_incr_load').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "onprem_sql_to azureblob",
									"type": "Copy",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "Lookup_to get_max_update_date_from_trans_table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from @{item().SOURCE_TABLE_SCHEMA}.@{item().SOURCE_TABLE_NAME}\n\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "CLAIM_ID"
													},
													"sink": {
														"name": "CLAIM_ID"
													}
												},
												{
													"source": {
														"name": "CLAIM_NUMBER"
													},
													"sink": {
														"name": "CLAIM_NUMBER"
													}
												},
												{
													"source": {
														"name": "CLAIM_TYPE"
													},
													"sink": {
														"name": "CLAIM_TYPE"
													}
												},
												{
													"source": {
														"name": "LOCATION"
													},
													"sink": {
														"name": "CLAIM_LOCATION"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "sqlserver_db_onprem",
											"type": "DatasetReference",
											"parameters": {
												"schema_name": {
													"value": "@item().SOURCE_TABLE_SCHEMA",
													"type": "Expression"
												},
												"table_name": {
													"value": "@item().SOURCE_TABLE_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": "@concat(item().TARGET_TABLE,'.csv')",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@item().TARGET_TABLE_SCHEMA",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "azureblob_to_azuresql",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Switch1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": "@concat(item().TARGET_TABLE,'.csv')",
												"folder_name": "@item().TARGET_TABLE_SCHEMA"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSql_dataset_withparam",
											"type": "DatasetReference",
											"parameters": {
												"table_name": {
													"value": "@item().TARGET_TABLE",
													"type": "Expression"
												},
												"schema_name": {
													"value": "@item().TARGET_TABLE_SCHEMA",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "arcive-from_azureblob_to_arcivefolder",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "azureblob_to_azuresql",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": "@concat(item().TARGET_TABLE,'.csv')",
												"folder_name": "@item().TARGET_TABLE_SCHEMA"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dataset_for_arcive",
											"type": "DatasetReference",
											"parameters": {
												"container": "arcive",
												"file": {
													"value": " ",
													"type": "Expression"
												},
												"folder": {
													"value": " ",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "delete_from_azureblob_after arcive",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "arcive-from_azureblob_to_arcivefolder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": "@concat(item().TARGET_TABLE,'.csv')",
												"folder_name": "@item().TARGET_TABLE_SCHEMA"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Lookup_to get_max_update_date_from_trans_table",
									"type": "Lookup",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "delete_from_azureblob_after arcive",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select max(@{item().WATERMARK_COLUMN}) as max_update_date from   @{item().SOURCE_TABLE_SCHEMA}.@{item().SOURCE_TABLE_NAME}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "sqlserver_db_onprem",
											"type": "DatasetReference",
											"parameters": {
												"schema_name": {
													"value": " ",
													"type": "Expression"
												},
												"table_name": {
													"value": " ",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "update_proceed_date_as max_date_on_cntrl_table",
									"type": "Script",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "update METADATA.CONTROL_TABLE set PROCESSED_DATE='@{variables('v_max_update_date')}' where control_id=@{item().CONTROL_ID}\n\n\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "update_proceed_date_as max_date_on_cntrl_table_using_sp",
									"type": "SqlServerStoredProcedure",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "onprem_sql_to azureblob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[update_PROCESSED_DATE]",
										"storedProcedureParameters": {
											"in_CONTROL_ID": {
												"value": {
													"value": "@item().CONTROL_ID",
													"type": "Expression"
												}
											},
											"in_PROCESSED_DATE": {
												"value": {
													"value": "@variables('v_max_update_date')",
													"type": "Expression"
												}
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().SOURCE_TABLE_NAME",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "CLAIM",
												"activities": [
													{
														"name": "onprem_sql_to azureblob_claim",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "select * from @{item().SOURCE_TABLE_SCHEMA}.@{item().SOURCE_TABLE_NAME}\n\n",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"mappings": [
																	{
																		"source": {
																			"name": "CLAIM_ID"
																		},
																		"sink": {
																			"name": "CLAIM_ID"
																		}
																	},
																	{
																		"source": {
																			"name": "CLAIM_NUMBER"
																		},
																		"sink": {
																			"name": "CLAIM_NUMBER"
																		}
																	},
																	{
																		"source": {
																			"name": "CLAIM_TYPE"
																		},
																		"sink": {
																			"name": "CLAIM_TYPE"
																		}
																	},
																	{
																		"source": {
																			"name": "LOCATION"
																		},
																		"sink": {
																			"name": "CLAIM_LOCATION"
																		}
																	}
																],
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "sqlserver_db_onprem",
																"type": "DatasetReference",
																"parameters": {
																	"schema_name": {
																		"value": "@item().SOURCE_TABLE_SCHEMA",
																		"type": "Expression"
																	},
																	"table_name": {
																		"value": "@item().SOURCE_TABLE_NAME",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "azureblob_storage_with_param",
																"type": "DatasetReference",
																"parameters": {
																	"contanier_name": "project-folder",
																	"filename": {
																		"value": "@concat(item().TARGET_TABLE,'.csv')",
																		"type": "Expression"
																	},
																	"folder_name": {
																		"value": "@item().TARGET_TABLE_SCHEMA",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "INCIDENT",
												"activities": [
													{
														"name": "onprem_sql_to azureblob_claim_copy1",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "select * from @{item().SOURCE_TABLE_SCHEMA}.@{item().SOURCE_TABLE_NAME}\n\n",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"mappings": [
																	{
																		"source": {
																			"name": "INCIDENT_ID"
																		},
																		"sink": {
																			"name": "INCIDENT_ID"
																		}
																	},
																	{
																		"source": {
																			"name": "INCIDENT_NUMBER"
																		},
																		"sink": {
																			"name": "INCIDENT_NUMBER"
																		}
																	},
																	{
																		"source": {
																			"name": "INCIDENT_TYPE"
																		},
																		"sink": {
																			"name": "INCIDENT_TYPE"
																		}
																	},
																	{
																		"source": {
																			"name": "LOCATION"
																		},
																		"sink": {
																			"name": "INCIDENT_LOCATION"
																		}
																	}
																],
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "sqlserver_db_onprem",
																"type": "DatasetReference",
																"parameters": {
																	"schema_name": {
																		"value": "@item().SOURCE_TABLE_SCHEMA",
																		"type": "Expression"
																	},
																	"table_name": {
																		"value": "@item().SOURCE_TABLE_NAME",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "azureblob_storage_with_param",
																"type": "DatasetReference",
																"parameters": {
																	"contanier_name": "project-folder",
																	"filename": {
																		"value": "@concat(item().TARGET_TABLE,'.csv')",
																		"type": "Expression"
																	},
																	"folder_name": {
																		"value": "@item().TARGET_TABLE_SCHEMA",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "OCCERANCE",
												"activities": [
													{
														"name": "onprem_sql_to azureblob_claim_copy2",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "select * from @{item().SOURCE_TABLE_SCHEMA}.@{item().SOURCE_TABLE_NAME}\n\n",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"mappings": [
																	{
																		"source": {
																			"name": "OCCERANCE_ID"
																		},
																		"sink": {
																			"name": "OCCERANCE_ID"
																		}
																	},
																	{
																		"source": {
																			"name": "OCCERANCE_NUMBER"
																		},
																		"sink": {
																			"name": "OCCERANCE_NUMBER"
																		}
																	},
																	{
																		"source": {
																			"name": "OCCERANCE_TYPE"
																		},
																		"sink": {
																			"name": "OCCERANCE_TYPE"
																		}
																	},
																	{
																		"source": {
																			"name": "LOCATION"
																		},
																		"sink": {
																			"name": "OCCERANCE_LOCATION"
																		}
																	}
																],
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "sqlserver_db_onprem",
																"type": "DatasetReference",
																"parameters": {
																	"schema_name": {
																		"value": "@item().SOURCE_TABLE_SCHEMA",
																		"type": "Expression"
																	},
																	"table_name": {
																		"value": "@item().SOURCE_TABLE_NAME",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "azureblob_storage_with_param",
																"type": "DatasetReference",
																"parameters": {
																	"contanier_name": "project-folder",
																	"filename": {
																		"value": "@concat(item().TARGET_TABLE,'.csv')",
																		"type": "Expression"
																	},
																	"folder_name": {
																		"value": "@item().TARGET_TABLE_SCHEMA",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"source_system": {
						"type": "string",
						"defaultValue": "SQL_SERVER"
					},
					"load_type": {
						"type": "string"
					}
				},
				"variables": {
					"max_update_date": {
						"type": "String"
					},
					"v_max_update_date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "class_HW_folder"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-09T22:03:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSql_dataset_withparam')]",
				"[concat(variables('factoryId'), '/datasets/sqlserver_db_onprem')]",
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]",
				"[concat(variables('factoryId'), '/datasets/dataset_for_arcive')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scd type2withlkp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "scdtype2withlkp",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "scdtype2withlkp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empsrc": {
										"schema_name": "dbo",
										"table_name": "emp2src"
									},
									"sinkforlkp": {
										"schema_name": "dbo",
										"table_name": "emp2"
									},
									"sink1": {
										"schema_name": "dbo",
										"table_name": "emp2"
									},
									"sink2": {
										"schema_name": "dbo",
										"table_name": "emp2"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-24T19:45:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/scdtype2withlkp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scd1flowtabletotable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "scd1flowtabletotable",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "scd1flowtabletotable",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empsrc": {
										"schema_name": "dbo",
										"table_name": "emp1src"
									},
									"sinkforlkp": {
										"schema_name": "dbo",
										"table_name": "emp1"
									},
									"sink1": {
										"schema_name": "dbo",
										"table_name": "emp1"
									},
									"sink2": {
										"schema_name": "dbo",
										"table_name": "emp1"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-26T23:08:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/scd1flowtabletotable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/senario10_split_singl_col_into_multiple_rows')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "senario10_split_singl_col_into_multiple_rows",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "senario10_split_singl_col_into_multiple_rows",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"container_name": "project-folder",
										"folder_name": "src_folder",
										"file_name": "senario10.csv"
									},
									"sink1": {
										"container_name": "project-folder",
										"folder_name": "tgt_folder",
										"file_name": "senario10.csv"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "senario"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-30T20:46:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/senario10_split_singl_col_into_multiple_rows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/senario11_mrg_multpl_row_val_into_sngl_row')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "senario11_mrg_multpl_row_val_into_sngl_row",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "senario11_mrg_multpl_row_val_into_sngl_row",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"container_name": "project-folder",
										"folder_name": "tgt_folder",
										"file_name": "senario10.csv"
									},
									"sink1": {
										"container_name": "project-folder",
										"folder_name": "src_folder",
										"file_name": "senario11tgt.csv"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "senario"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-30T20:34:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/senario11_mrg_multpl_row_val_into_sngl_row')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/senario2_delete_adlssfile_ older than_days')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": "project-folder",
									"filename": {
										"value": " ",
										"type": "Expression"
									},
									"folder_name": "SQL_SERVER"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": null,
								"modifiedDatetimeEnd": {
									"value": "@adddays(utcNow(),-47)",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delete1",
									"type": "Delete",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												},
												"folder_name": "SQL_SERVER"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "senario"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-30T20:38:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/senario3_emp1copy_cumsal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "emp1copy_cumsal_senario3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"container_name": "project-folder",
										"folder_name": "src_folder",
										"file_name": "emp1.csv"
									},
									"sink1": {
										"schema_name": "dbo",
										"table_name": "emp1"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "senario"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-30T20:39:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/emp1copy_cumsal_senario3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/senario4_copy_activity_if true')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Getallfilefromemp_folder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": "project-folder",
									"filename": {
										"value": "*.csv",
										"type": "Expression"
									},
									"folder_name": "new"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Getallfilefromemp_folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Getallfilefromemp_folder').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob_storage_with_param",
											"type": "DatasetReference",
											"parameters": {
												"contanier_name": "project-folder",
												"filename": {
													"value": " ",
													"type": "Expression"
												},
												"folder_name": "new"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "azure_new",
											"type": "DatasetReference",
											"parameters": {
												"schema_name": "dbo",
												"table_name": "@replace(item().name,'.csv','')"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "senario"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-25T20:21:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]",
				"[concat(variables('factoryId'), '/datasets/azure_new')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/senario4_getcount_of_file_and_if_5 only_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference",
								"parameters": {
									"contanier_name": "project-folder",
									"filename": {
										"value": "*.*",
										"type": "Expression"
									},
									"folder_name": "emp"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "countfile",
							"value": {
								"value": "@length(activity('Get Metadata1').output.childItems)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('countfile'),4)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Fail1",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "filecountis not 5",
										"errorCode": "200"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "exeplinfortruecondiyion",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "senario4_copy_activity_if true",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"countfile": {
						"type": "Integer"
					}
				},
				"folder": {
					"name": "senario"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-25T20:22:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]",
				"[concat(variables('factoryId'), '/pipelines/senario4_copy_activity_if true')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/senario6_scd1emp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "scd1emp",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "senario6_scd1emp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceemp": {
										"container_name": "project-folder",
										"folder_name": "src_folder",
										"file_name": "emp1.csv"
									},
									"lkpsink": {
										"schema_name": "dbo",
										"table_name": "emp1_src"
									},
									"sinkinsert": {
										"schema_name": "dbo",
										"table_name": "emp1_src"
									},
									"sinkupd": {
										"schema_name": "dbo",
										"table_name": "emp1_src"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"container_name": {
						"type": "string",
						"defaultValue": "porject-folder"
					},
					"folder_name": {
						"type": "string",
						"defaultValue": "src_folder"
					},
					"file_name": {
						"type": "string",
						"defaultValue": "emp1.csv"
					},
					"schema_name": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"table_name": {
						"type": "string",
						"defaultValue": "emp1"
					}
				},
				"folder": {
					"name": "senario"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-30T20:43:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/senario6_scd1emp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/senario7_scdtype2lkp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "senario7_scdtype2lkp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"emp1src": {
										"container_name": "project-folder",
										"folder_name": "src_folder",
										"file_name": "emp1.csv"
									},
									"sinklkp": {
										"table_name": "emp1_tgt",
										"schema_name": "dbo"
									},
									"sinkinsert": {
										"table_name": "emp1_tgt",
										"schema_name": "dbo"
									},
									"sinkupdate": {
										"table_name": "emp1_tgt",
										"schema_name": "dbo"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "senario"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-30T20:44:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/senario7_scdtype2lkp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/skkeyincrimen')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "skkeyincrimen",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"schema_name": "dbo",
										"table_name": "employee_sequence_src"
									},
									"tgtmaxempidskkey": {
										"schema_name": "dbo",
										"table_name": "employee_sequence_TGT"
									},
									"sink1": {
										"schema_name": "dbo",
										"table_name": "employee_sequence_TGT"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-13T06:26:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/skkeyincrimen')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/switch_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.s_file_name",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "employee.csv",
									"activities": [
										{
											"name": "Copy data1",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "DelimitedTextSource",
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "azureblob_storage_with_param",
													"type": "DatasetReference",
													"parameters": {
														"contanier_name": "input",
														"filename": {
															"value": "@pipeline().parameters.s_file_name",
															"type": "Expression"
														},
														"folder_name": "new"
													}
												}
											],
											"outputs": [
												{
													"referenceName": "azureblob_storage_with_param",
													"type": "DatasetReference",
													"parameters": {
														"contanier_name": "project-folder",
														"filename": {
															"value": " ",
															"type": "Expression"
														},
														"folder_name": {
															"value": "@pipeline().parameters.tgt_folder_name",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "department.csv",
									"activities": [
										{
											"name": "Copy data2",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "DelimitedTextSource",
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "azureblob_storage_with_param",
													"type": "DatasetReference",
													"parameters": {
														"contanier_name": "input",
														"filename": {
															"value": "@pipeline().parameters.s_file_name",
															"type": "Expression"
														},
														"folder_name": "new"
													}
												}
											],
											"outputs": [
												{
													"referenceName": "azureblob_storage_with_param",
													"type": "DatasetReference",
													"parameters": {
														"contanier_name": "project-folder",
														"filename": {
															"value": " ",
															"type": "Expression"
														},
														"folder_name": {
															"value": "@pipeline().parameters.tgt_folder_name",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"s_file_name": {
						"type": "string"
					},
					"tgt_folder_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "New folder"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-05T17:42:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/testpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_to get_max_update_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select max(update_date) as max_update_date from transaction_data;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sqlserver_db_onprem",
								"type": "DatasetReference",
								"parameters": {
									"schema_name": {
										"value": " ",
										"type": "Expression"
									},
									"table_name": {
										"value": " ",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Set_max_update_date",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Lookup_to get_max_update_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_max_update_date",
							"value": {
								"value": "update METADATA.CONTROL_TABLE set PROCESSED_DATE='@{activity('Lookup_to get_max_update_date').output.firstRow.max_update_date}' where control_id=4\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Script1",
						"type": "Script",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Set_max_update_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "update METADATA.CONTROL_TABLE set PROCESSED_DATE='@{variables('v_max_update_date')}' where control_id=4",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"max_update_date": {
						"type": "String"
					},
					"v_max_update_date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "class_HW_folder"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-04T19:11:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sqlserver_db_onprem')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/unique_record_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "unique_record_load",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "senario5_unique_record_load",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"contanier_name": "project-folder",
										"filename": "emp_dup.csv",
										"folder_name": "src_folder"
									},
									"sink1": {
										"contanier_name": "project-folder",
										"filename": "emp_uniq.csv",
										"folder_name": "tgt_folder"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "senario"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-30T20:42:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/senario5_unique_record_load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/variable concept')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "a",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable2",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "b",
							"value": {
								"value": "load",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable3",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set variable2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "filename",
							"value": {
								"value": "@concat(variables('a'),variables('b'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"a": {
						"type": "String"
					},
					"b": {
						"type": "String"
					},
					"filename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "New folder"
				},
				"annotations": [],
				"lastPublishTime": "2024-11-28T23:41:30Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSql_dataset_withparam')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table_name": {
						"type": "string"
					},
					"schema_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "emp1.csv",
						"folderPath": "src_folder",
						"fileSystem": "project-folder"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_forfixedlengthfile",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"folder": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_forfixedlengthfile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage5",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container_name": {
						"type": "string"
					},
					"folder_name": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder_name",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container_name",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage5')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle_new",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle_new')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adls2025')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"file": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "new",
						"fileSystem": "project-folder"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adls_dataset_for_senario_errorhandle')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls adls storage for dataflow",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container_name": {
						"type": "string"
					},
					"folder_name": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder_name",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container_name",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "salesDate",
						"type": "String"
					},
					{
						"name": "salesItem",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls adls storage for dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azure_new')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azuresql_for_dataflow",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DEPARTMENT_ID",
						"type": "nvarchar"
					},
					{
						"name": "DEPARTMENT_NAME",
						"type": "nvarchar"
					},
					{
						"name": "MANAGER_ID",
						"type": "nvarchar"
					},
					{
						"name": "LOCATION_ID",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azuresql_for_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azureblob_storage_with_param')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage5",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"contanier_name": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					},
					"folder_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder_name",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().contanier_name",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage5')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azuresql_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_azblob_2025')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_2025",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"folder": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_2025')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_for_arcive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_archive_files",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"file": {
						"type": "string"
					},
					"folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"compressionCodec": "gzip",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "user ",
						"type": "String"
					},
					{
						"name": "dept",
						"type": "String"
					},
					{
						"name": " designation",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_archive_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_fordataflow')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls adls storage for dataflow",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container_name": {
						"type": "string"
					},
					"folder_name": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder_name",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container_name",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "salary",
						"type": "String"
					},
					{
						"name": "loc",
						"type": "String"
					},
					{
						"name": " email",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls adls storage for dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azuresql_for_dataflow')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azuresql_for_dataflow",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azuresql_for_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/onprem_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/oracle_db_onprem_with_param')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_oracle_onpremise",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_oracle_onpremise')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/oracledatasethr')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle_core_schema",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"t_schema": {
						"type": "string"
					},
					"t_table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().t_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().t_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle_core_schema')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqlserver_db_onprem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage3_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage5')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage5_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_2025')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_2025_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_forfixedlengthfile')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_forfixedlengthfile_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault2_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase1_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle_core_schema')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('Oracle_core_schema_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime2",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle_new')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('Oracle_new_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServer1_properties_typeProperties_server')]",
					"database": "[parameters('SqlServer1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('SqlServer1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServer1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime2",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer_onprem')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServer_onprem_properties_typeProperties_server')]",
					"database": "[parameters('SqlServer_onprem_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('SqlServer_onprem_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServer_onprem_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azuresql_new_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('azuresql_new_ls_properties_typeProperties_server')]",
					"database": "[parameters('azuresql_new_ls_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('azuresql_new_ls_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('azuresql_new_ls_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls adls storage for dataflow')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls adls storage for dataflow_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_archive_files')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_archive_files_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azuresql_for_dataflow')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('ls_azuresql_for_dataflow_properties_typeProperties_server')]",
					"database": "[parameters('ls_azuresql_for_dataflow_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('ls_azuresql_for_dataflow_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_azuresql_for_dataflow_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_mssql_onprem')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_mssql_onprem_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_oracle_onpremise')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('ls_oracle_onpremise_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime2",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {
					"selfContainedInteractiveAuthoringEnabled": false
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime2')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ProcessFixedlengthfile')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "senarionew"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {_col0_} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(empid = substring({_col0_},1,4),",
						"          name = substring({_col0_}, 5, 10),",
						"          state = substring({_col0_}, 15, 2),",
						"          emp_contact = substring({_col0_}, 17, 10)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          empid,",
						"          name,",
						"          state,",
						"          emp_contact",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText2')]",
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PARSE_trans')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ls_azuresql_for_dataflow",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ls_azuresql_for_dataflow",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "parse1project"
						},
						{
							"name": "select1"
						},
						{
							"name": "parse1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_NAME as string,",
						"          PROJECTS as string,",
						"          ADDRESS as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 parse(PROJECTS_new = PROJECTS ? (projects1 as string,",
						"          projects2 as string),",
						"     format: 'delimited',",
						"     columnNamesAsHeader: false,",
						"     columnDelimiter: '|',",
						"     nullValue: '') ~> parse1project",
						"parse1project select(mapColumn(",
						"          EMPLOYEE_NAME,",
						"          PROJECTS1 = PROJECTS_new.projects1,",
						"          PROJECT2 = PROJECTS_new.projects2,",
						"          ADDRESS",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 parse(ADDRESS_NEW = ADDRESS ? (COUNTRY as string,",
						"          CITY as string),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> parse1",
						"parse1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EMPLOYEE_NAME,",
						"          PROJECT1 = PROJECTS1,",
						"          PROJECT2,",
						"          COUNTRY = ADDRESS_NEW.COUNTRY,",
						"          CITY = ADDRESS_NEW.CITY",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ls_azuresql_for_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "senarionew"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference"
							},
							"name": "flatten"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "splitmultiplerow"
						},
						{
							"name": "splitfunction"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Claim_Number as integer,",
						"          Claimant_Name as string,",
						"          Claim_Type as string,",
						"          Location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> flatten",
						"splitfunction foldDown(unroll(Claim_Type),",
						"     mapColumn(",
						"          Claim_Type,",
						"          Claim_Number,",
						"          Claimant_Name,",
						"          Location",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> splitmultiplerow",
						"flatten derive(Claim_Type = split(Claim_Type, ',')) ~> splitfunction",
						"splitmultiplerow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSql_dataset_withparam')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowSKkey')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as short,",
						"          name as string,",
						"          gender as string,",
						"          country as string,",
						"          department as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 keyGenerate(output(SKEY as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 select(mapColumn(",
						"          id,",
						"          name,",
						"          gender,",
						"          country,",
						"          department,",
						"          SKEY",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_unpivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "unpivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CLAIM_ID as integer,",
						"          BUCKET1 as integer,",
						"          BUCKET2 as integer,",
						"          BUCKET3 as integer,",
						"          BUCKET4 as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 unpivot(output(",
						"          BUCKET_VALUE as string,",
						"          BUCKET_AMOUNT as integer",
						"     ),",
						"     ungroupBy(CLAIM_ID),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivot1",
						"unpivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSql_dataset_withparam')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfSplitSinglerow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "senarionew"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as short,",
						"          skill_list as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(skill_list = split(skill_list, ',')) ~> derivedColumn1",
						"derivedColumn1 foldDown(unroll(skill_list),",
						"     mapColumn(",
						"          empid,",
						"          skill_list",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     partitionFileNames:['tgt_splitrow.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CummulativeRunningtotalusingDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "senarionew"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "window1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as short,",
						"          name as string,",
						"          salary as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 window(asc(salary, true),",
						"     cum_total = sum(salary)) ~> window1",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     partitionFileNames:['emp1tgt.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_MergMultiplerowintoasinglerow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "senarionew"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as short,",
						"          empname as string,",
						"          skill as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 aggregate(groupBy(empid),",
						"     skill_list = collect(skill)) ~> aggregate1",
						"aggregate1 derive(skill_list = replace(replace(replace(toString(skill_list),'[',''),']',''),'\"','')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     partitionFileNames:['tgt_listagg.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_removeduplicate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "senarionew"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "union1"
						},
						{
							"name": "toremoveduprow"
						},
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as integer,",
						"          {name country} as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          empid as integer,",
						"          {name country} as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, source2 union(byName: true)~> union1",
						"union1 aggregate(groupBy(empid),",
						"     each(match(name!='empid'), $$ = last($$))) ~> toremoveduprow",
						"toremoveduprow sort(asc(empid, true)) ~> sort1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_scdtype1_new')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "New_2025"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference"
							},
							"name": "claimfile"
						},
						{
							"dataset": {
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference"
							},
							"name": "lkpontgt"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference"
							},
							"name": "insertclaim"
						},
						{
							"dataset": {
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference"
							},
							"name": "updsink"
						}
					],
					"transformations": [
						{
							"name": "lkpinsertorupd"
						},
						{
							"name": "renamecolumnnamebasedonincommingstream"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "selectrequiredcolumn"
						},
						{
							"name": "splitinsertupdate"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Claim_number as string,",
						"          incident_number as string,",
						"          claimant_name as string,",
						"          claimant_address as string,",
						"          payment_type as string,",
						"          claim_amount as integer,",
						"          Insurance_type as string,",
						"          insurance_number as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> claimfile",
						"source(output(",
						"          Claim_number as string,",
						"          incident_number as string,",
						"          claimant_name as string,",
						"          claimant_address as string,",
						"          payment_type as string,",
						"          claim_amount as string,",
						"          Insurance_type as string,",
						"          insurance_number as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> lkpontgt",
						"claimfile, lkpontgt lookup(claimfile@Claim_number == lkpontgt@Claim_number,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpinsertorupd",
						"lkpinsertorupd select(mapColumn(",
						"          Claim_number = claimfile@Claim_number,",
						"          incident_number = claimfile@incident_number,",
						"          claimant_name = claimfile@claimant_name,",
						"          claimant_address = claimfile@claimant_address,",
						"          payment_type = claimfile@payment_type,",
						"          claim_amount = claimfile@claim_amount,",
						"          Insurance_type = claimfile@Insurance_type,",
						"          insurance_number = claimfile@insurance_number,",
						"          lkp_Claim_number = lkpontgt@Claim_number,",
						"          lkp_incident_number = lkpontgt@incident_number,",
						"          lkp_claimant_name = lkpontgt@claimant_name,",
						"          lkp_claimant_address = lkpontgt@claimant_address,",
						"          lkp_payment_type = lkpontgt@payment_type,",
						"          lkp_claim_amount = lkpontgt@claim_amount,",
						"          lkp_Insurance_type = lkpontgt@Insurance_type,",
						"          lkp_insurance_number = lkpontgt@insurance_number",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> renamecolumnnamebasedonincommingstream",
						"renamecolumnnamebasedonincommingstream derive(insert_update_logic = iif(isNull(lkp_Claim_number),'i','u')) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Claim_number,",
						"          incident_number,",
						"          claimant_name,",
						"          claimant_address,",
						"          payment_type,",
						"          claim_amount,",
						"          Insurance_type,",
						"          insurance_number,",
						"          lkp_Claim_number,",
						"          insert_update_logic",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectrequiredcolumn",
						"selectrequiredcolumn split(insert_update_logic=='i',",
						"     insert_update_logic=='u',",
						"     disjoint: false) ~> splitinsertupdate@(insert, update, default)",
						"splitinsertupdate@update alterRow(updateIf(insert_update_logic=='u')) ~> alterRow1",
						"splitinsertupdate@insert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> insertclaim",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Claim_number'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> updsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]",
				"[concat(variables('factoryId'), '/datasets/AzureSql_dataset_withparam')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_scdtype2_new')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "New_2025"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference"
							},
							"name": "lkptgt"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference"
							},
							"name": "insTgt"
						},
						{
							"dataset": {
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference"
							},
							"name": "updtgt"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "insertUpdateLogic"
						},
						{
							"name": "split1"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumnActiveflaglogic"
						},
						{
							"name": "derivedColumnActivflagNlogic"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "surrogateKeygenerate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Claim_number as string,",
						"          incident_number as string,",
						"          claimant_name as string,",
						"          claimant_address as string,",
						"          payment_type as string,",
						"          claim_amount as string,",
						"          Insurance_type as string,",
						"          insurance_number as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          Claim_number as string,",
						"          incident_number as string,",
						"          claimant_name as string,",
						"          claimant_address as string,",
						"          payment_type as string,",
						"          claim_amount as string,",
						"          Insurance_type as string,",
						"          insurance_number as string,",
						"          sk_key as integer,",
						"          Active_flag as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select * from claim_tgt_scd2data where Active_flag=\\'Y\\'',",
						"     format: 'query') ~> lkptgt",
						"source1, lkptgt lookup(source1@Claim_number == lkptgt@Claim_number,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(v_instr_ubdate_logic = iif(isNull(lkptgt@Claim_number),'i',iif(! isNull(lkptgt@Claim_number) && :src_md5!=:tgt_md5,'u','')),",
						"          src_md5 := md5(source1@incident_number,source1@claimant_name,source1@claimant_address,source1@payment_type,source1@claim_amount,source1@Insurance_type,source1@insurance_number),",
						"          tgt_md5 := md5(lkptgt@incident_number,lkptgt@claimant_name,lkptgt@claimant_address,lkptgt@payment_type,lkptgt@claim_amount,lkptgt@Insurance_type,lkptgt@insurance_number)) ~> insertUpdateLogic",
						"select1 split(v_instr_ubdate_logic=='i'||v_instr_ubdate_logic=='u',",
						"     v_instr_ubdate_logic=='u',",
						"     disjoint: false) ~> split1@(insert, update, default)",
						"insertUpdateLogic select(mapColumn(",
						"          Claim_number = source1@Claim_number,",
						"          incident_number = source1@incident_number,",
						"          claimant_name = source1@claimant_name,",
						"          claimant_address = source1@claimant_address,",
						"          payment_type = source1@payment_type,",
						"          claim_amount = source1@claim_amount,",
						"          Insurance_type = source1@Insurance_type,",
						"          insurance_number = source1@insurance_number,",
						"          Claim_number = lkptgt@Claim_number,",
						"          sk_key,",
						"          v_instr_ubdate_logic",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"surrogateKeygenerate derive(ins_activeflag = 'Y') ~> derivedColumnActiveflaglogic",
						"split1@update derive(upd_active_flag = 'N') ~> derivedColumnActivflagNlogic",
						"derivedColumnActivflagNlogic alterRow(updateIf(1==1)) ~> alterRow1",
						"split1@insert keyGenerate(output(sk_key_generate as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeygenerate",
						"derivedColumnActiveflaglogic sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Claim_number,",
						"          incident_number,",
						"          claimant_name,",
						"          claimant_address,",
						"          payment_type,",
						"          claim_amount,",
						"          Insurance_type,",
						"          insurance_number,",
						"          sk_key = sk_key_generate,",
						"          Active_flag = ins_activeflag",
						"     )) ~> insTgt",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['sk_key'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          sk_key,",
						"          Active_flag = upd_active_flag",
						"     )) ~> updtgt"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]",
				"[concat(variables('factoryId'), '/datasets/AzureSql_dataset_withparam')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfscd2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dataset_azblob_2025",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference"
							},
							"name": "lkptgt"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference"
							},
							"name": "sinkupdate"
						},
						{
							"dataset": {
								"referenceName": "ls_azuresql_for_dataflow",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "insertupdatelogic"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "split1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "activeflagNderivedColumn2"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Claim_number as string,",
						"          incident_number as string,",
						"          claimant_name as string,",
						"          claimant_address as string,",
						"          payment_type as string,",
						"          claim_amount as integer,",
						"          Insurance_type as string,",
						"          insurance_number as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          Claim_number as string,",
						"          incident_number as string,",
						"          claimant_name as string,",
						"          claimant_address as string,",
						"          payment_type as string,",
						"          claim_amount as string,",
						"          Insurance_type as string,",
						"          insurance_number as string,",
						"          sk_key as integer,",
						"          Active_flag as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> lkptgt",
						"source1, lkptgt lookup(source1@Claim_number == lkptgt@Claim_number,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(insert_update_flag = iif(isNull(lkptgt@Claim_number),'i',\r",
						" iif(not(isNull(lkptgt@Claim_number)) && :md5_src != :md5_tgt,'u','')),",
						"          md5_src := md5(source1@incident_number,source1@claimant_name,source1@claimant_address,source1@payment_type,\r",
						"source1@claim_amount,source1@Insurance_type,source1@insurance_number),",
						"          md5_tgt := md5(lkptgt@incident_number,lkptgt@claimant_name,lkptgt@claimant_address,lkptgt@payment_type,\r",
						"lkptgt@claim_amount,lkptgt@Insurance_type,lkptgt@insurance_number)) ~> insertupdatelogic",
						"surrogateKey1 derive(Active_flag = 'Y') ~> derivedColumn1",
						"insertupdatelogic split(insert_update_flag == 'i' ||insert_update_flag == 'u',",
						"     insert_update_flag == 'u',",
						"     disjoint: false) ~> split1@(insert, update)",
						"split1@update alterRow(updateIf(1==1)) ~> alterRow1",
						"alterRow1 derive(Active_flag = 'n') ~> activeflagNderivedColumn2",
						"select2 keyGenerate(output(surrogatekeygenerated as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"split1@insert select(mapColumn(",
						"          Claim_number = split1@insert@Claim_number,",
						"          incident_number = split1@insert@incident_number,",
						"          claimant_name = split1@insert@claimant_name,",
						"          claimant_address = split1@insert@claimant_address,",
						"          payment_type = split1@insert@payment_type,",
						"          claim_amount = split1@insert@claim_amount,",
						"          Insurance_type = split1@insert@Insurance_type,",
						"          insurance_number = split1@insert@insurance_number,",
						"          sk_key,",
						"          Active_flag,",
						"          insert_update_flag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"activeflagNderivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          sk_key,",
						"          Active_flag",
						"     )) ~> sinkupdate",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Claim_number,",
						"          incident_number,",
						"          claimant_name,",
						"          claimant_address,",
						"          payment_type,",
						"          claim_amount,",
						"          Insurance_type,",
						"          insurance_number,",
						"          sk_key = surrogatekeygenerated,",
						"          Active_flag",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_azblob_2025')]",
				"[concat(variables('factoryId'), '/datasets/AzureSql_dataset_withparam')]",
				"[concat(variables('factoryId'), '/datasets/ls_azuresql_for_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/emp1copy_cumsal_senario3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "senario"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dataset_fordataflow",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ls_azuresql_for_dataflow",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "window1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as short,",
						"          name as string,",
						"          salary as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 window(asc(salary, true),",
						"     cumsalary = sum(salary)) ~> window1",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_fordataflow')]",
				"[concat(variables('factoryId'), '/datasets/ls_azuresql_for_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scd1flowtabletotable')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ls_azuresql_for_dataflow",
								"type": "DatasetReference"
							},
							"name": "empsrc"
						},
						{
							"dataset": {
								"referenceName": "ls_azuresql_for_dataflow",
								"type": "DatasetReference"
							},
							"name": "sinkforlkp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ls_azuresql_for_dataflow",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ls_azuresql_for_dataflow",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "split1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as integer,",
						"          name as string,",
						"          salary as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> empsrc",
						"source(output(",
						"          emp_id as integer,",
						"          name as string,",
						"          salary as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sinkforlkp",
						"empsrc, sinkforlkp lookup(empsrc@emp_id == sinkforlkp@emp_id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          emp_id = empsrc@emp_id,",
						"          name = empsrc@name,",
						"          salary = empsrc@salary,",
						"          sink_emp_id = sinkforlkp@emp_id,",
						"          sink_name = sinkforlkp@name,",
						"          sink_salary = sinkforlkp@salary",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(insert_update_logic = iif(isNull(sink_emp_id),'i','u')) ~> derivedColumn1",
						"derivedColumn1 split(insert_update_logic=='i',",
						"     insert_update_logic=='u',",
						"     disjoint: false) ~> split1@(insert, update, default)",
						"split1@update alterRow(updateIf(1==1)) ~> alterRow1",
						"split1@insert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['emp_id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ls_azuresql_for_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scdtype2withlkp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ls_azuresql_for_dataflow",
								"type": "DatasetReference"
							},
							"name": "empsrc"
						},
						{
							"dataset": {
								"referenceName": "ls_azuresql_for_dataflow",
								"type": "DatasetReference"
							},
							"name": "sinkforlkp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ls_azuresql_for_dataflow",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ls_azuresql_for_dataflow",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "lkptocomparesinkandsrc"
						},
						{
							"name": "selecttochangecolumnname"
						},
						{
							"name": "derivedinsertupdateflag"
						},
						{
							"name": "splitinsertupdate"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as integer,",
						"          e_name as string,",
						"          salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     partitionBy('hash', 1)) ~> empsrc",
						"source(output(",
						"          sg_key as integer,",
						"          emp_id as integer,",
						"          e_name as string,",
						"          salary as string,",
						"          flag_column as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select * from emp2 where flag_column=1',",
						"     format: 'query') ~> sinkforlkp",
						"empsrc, sinkforlkp lookup(empsrc@emp_id == sinkforlkp@emp_id,",
						"     multiple: true,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto',",
						"     pickup: 'any')~> lkptocomparesinkandsrc",
						"lkptocomparesinkandsrc select(mapColumn(",
						"          emp_id = empsrc@emp_id,",
						"          e_name = empsrc@e_name,",
						"          salary = empsrc@salary,",
						"          sg_key,",
						"          sink_emp_id = sinkforlkp@emp_id,",
						"          sink_e_name = sinkforlkp@e_name,",
						"          sink_salary = sinkforlkp@salary,",
						"          flag_column",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selecttochangecolumnname",
						"selecttochangecolumnname derive(insert_update_logic = iif(isNull(sink_emp_id),'i',iif(not(isNull(sink_emp_id)) && :md5_src!=:md5_sink,'u','')),",
						"          md5_src := md5(e_name+salary),",
						"          md5_sink := md5(sink_e_name+sink_salary),",
						"     partitionBy('hash', 1)) ~> derivedinsertupdateflag",
						"select2 split(insert_update_logic=='i' || insert_update_logic=='u',",
						"     insert_update_logic=='u',",
						"     disjoint: false,",
						"     partitionBy('hash', 1)) ~> splitinsertupdate@(insert, update, default)",
						"splitinsertupdate@update alterRow(updateIf(1==1),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"splitinsertupdate@insert derive(flag_column = 1,",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"alterRow1 derive(flag_column = 0,",
						"     partitionBy('hash', 1)) ~> derivedColumn2",
						"splitinsertupdate@update select(mapColumn(",
						"          sg_key,",
						"          insert_update_logic",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedinsertupdateflag select(mapColumn(",
						"          emp_id,",
						"          e_name,",
						"          salary,",
						"          sg_key,",
						"          flag_column,",
						"          insert_update_logic",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          emp_id,",
						"          e_name,",
						"          flag_column",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['sg_key'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          sg_key = flag_column,",
						"          flag_column",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ls_azuresql_for_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/senario10_split_singl_col_into_multiple_rows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "senario"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dataset_fordataflow",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dataset_fordataflow",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as short,",
						"          name as string,",
						"          projects as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(projects = split(projects,',')) ~> derivedColumn1",
						"derivedColumn1 foldDown(unroll(projects),",
						"     mapColumn(",
						"          id,",
						"          name,",
						"          projects",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          emp_id as string,",
						"          name as string,",
						"          salary as string,",
						"          loc as string,",
						"          { email} as string",
						"     ),",
						"     partitionFileNames:['senario10.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_fordataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/senario11_mrg_multpl_row_val_into_sngl_row')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "senario"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dataset_fordataflow",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dataset_fordataflow",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregatetogroupbyonidandname"
						},
						{
							"name": "derivedColumntoconvertarytostringvalue"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as short,",
						"          name as string,",
						"          projects as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 aggregate(groupBy(id,",
						"          name),",
						"     projects = collect(projects)) ~> aggregatetogroupbyonidandname",
						"aggregatetogroupbyonidandname derive(projects = replace(replace(replace(toString(projects),'[',''),']',''),'\"','')) ~> derivedColumntoconvertarytostringvalue",
						"derivedColumntoconvertarytostringvalue sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          emp_id as string,",
						"          name as string,",
						"          salary as string,",
						"          loc as string,",
						"          { email} as string",
						"     ),",
						"     partitionFileNames:['senario11tgt_csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_fordataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/senario5_unique_record_load')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "senario"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "azureblob_storage_with_param",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as short,",
						"          name as string,",
						"          gender as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 aggregate(groupBy(id),",
						"     each(match(name!='id'), $$ = first($$))) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azureblob_storage_with_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/senario6_scd1emp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "senario"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dataset_fordataflow",
								"type": "DatasetReference"
							},
							"name": "sourceemp"
						},
						{
							"dataset": {
								"referenceName": "ls_azuresql_for_dataflow",
								"type": "DatasetReference"
							},
							"name": "lkpsink"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ls_azuresql_for_dataflow",
								"type": "DatasetReference"
							},
							"name": "sinkinsert"
						},
						{
							"dataset": {
								"referenceName": "ls_azuresql_for_dataflow",
								"type": "DatasetReference"
							},
							"name": "sinkupd"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "split1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as short,",
						"          name as string,",
						"          salary as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceemp",
						"source(output(",
						"          emp_id as integer,",
						"          name as string,",
						"          salary as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> lkpsink",
						"sourceemp, lkpsink lookup(sourceemp@emp_id == lkpsink@emp_id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          emp_id = sourceemp@emp_id,",
						"          name = sourceemp@name,",
						"          salary = sourceemp@salary,",
						"          lkp_emp_id = lkpsink@emp_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(insert_upd_flag = iif(isNull(lkp_emp_id),'i','u'),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 split(insert_upd_flag=='i',",
						"     insert_upd_flag=='u',",
						"     disjoint: false) ~> split1@(insert, update, default)",
						"split1@update alterRow(updateIf(1==1)) ~> alterRow1",
						"split1@insert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('hash', 1)) ~> sinkinsert",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['emp_id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkupd"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_fordataflow')]",
				"[concat(variables('factoryId'), '/datasets/ls_azuresql_for_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/senario7_scdtype2lkp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "senario"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dataset_fordataflow",
								"type": "DatasetReference"
							},
							"name": "emp1src"
						},
						{
							"dataset": {
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference"
							},
							"name": "sinklkp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference"
							},
							"name": "sinkinsert"
						},
						{
							"dataset": {
								"referenceName": "AzureSql_dataset_withparam",
								"type": "DatasetReference"
							},
							"name": "sinkupdate"
						}
					],
					"transformations": [
						{
							"name": "lkptocomparesrctgt"
						},
						{
							"name": "selecttochangecolumnname"
						},
						{
							"name": "derivedinsertupdate"
						},
						{
							"name": "derivedColumntoinserttheflagvalueas1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumntoupdatetheflagvalue"
						},
						{
							"name": "select1"
						},
						{
							"name": "filter2updatetheflagvalueas0"
						},
						{
							"name": "filter2passinsertnewandupdatedrecord"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as short,",
						"          name as string,",
						"          salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> emp1src",
						"source(output(",
						"          sk_key as integer,",
						"          emp_id as integer,",
						"          name as string,",
						"          salary as string,",
						"          flag as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select * from emp1_tgt where flag=1',",
						"     format: 'query') ~> sinklkp",
						"emp1src, sinklkp lookup(emp1src@emp_id == sinklkp@emp_id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkptocomparesrctgt",
						"lkptocomparesrctgt select(mapColumn(",
						"          emp_id = emp1src@emp_id,",
						"          name = emp1src@name,",
						"          salary = emp1src@salary,",
						"          sk_key,",
						"          sink_emp_id = sinklkp@emp_id,",
						"          sink_name = sinklkp@name,",
						"          sink_salary = sinklkp@salary,",
						"          flag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selecttochangecolumnname",
						"selecttochangecolumnname derive(insert_update_logic = iif(isNull(sink_emp_id), 'i', iif(!isNull(sink_emp_id) && name!=sink_name || salary != sink_salary, 'u', ''))) ~> derivedinsertupdate",
						"filter2passinsertnewandupdatedrecord derive(flag = 1) ~> derivedColumntoinserttheflagvalueas1",
						"filter2updatetheflagvalueas0 alterRow(updateIf(1==1)) ~> alterRow1",
						"alterRow1 derive(flag = 0) ~> derivedColumntoupdatetheflagvalue",
						"derivedinsertupdate select(mapColumn(",
						"          emp_id,",
						"          name,",
						"          salary,",
						"          sk_key,",
						"          flag,",
						"          insert_update_logic",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 filter(insert_update_logic=='u') ~> filter2updatetheflagvalueas0",
						"select1 filter(insert_update_logic=='i'||insert_update_logic=='u') ~> filter2passinsertnewandupdatedrecord",
						"derivedColumntoinserttheflagvalueas1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          emp_id,",
						"          name,",
						"          salary,",
						"          flag",
						"     )) ~> sinkinsert",
						"derivedColumntoupdatetheflagvalue sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['sk_key'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          sk_key,",
						"          flag",
						"     )) ~> sinkupdate"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_fordataflow')]",
				"[concat(variables('factoryId'), '/datasets/AzureSql_dataset_withparam')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/skkeyincrimen')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ls_azuresql_for_dataflow",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ls_azuresql_for_dataflow",
								"type": "DatasetReference"
							},
							"name": "tgtmaxempidskkey"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ls_azuresql_for_dataflow",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "join1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          employee_name as string,",
						"          emp_sal as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          MAX_VALUE as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select coalesce(max(employee_id),0) as MAX_VALUE from dbo.employee_sequence_TGT\\n',",
						"     format: 'query') ~> tgtmaxempidskkey",
						"source1 keyGenerate(output(EMPLOYEE_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1, tgtmaxempidskkey join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 derive(MAX_VALUE = MAX_VALUE+EMPLOYEE_ID) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          employee_name,",
						"          emp_sal,",
						"          EMPLOYEE_ID = MAX_VALUE",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ls_azuresql_for_dataflow')]"
			]
		}
	]
}